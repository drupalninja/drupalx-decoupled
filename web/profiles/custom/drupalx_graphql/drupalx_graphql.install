<?php

/**
 * @file
 * Install functions for the DrupalX GraphQL profile.
 */

use Drupal\Component\Utility\Crypt;
use Drupal\Component\Utility\Random;
use Drupal\media\Entity\Media;
use Drupal\menu_link_content\Entity\MenuLinkContent;
use Drupal\node\Entity\Node;
use Drupal\paragraphs\Entity\Paragraph;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;

/**
 * Implements hook_install_tasks().
 */
function drupalx_graphql_install_tasks(&$install_state) {
  $tasks = [
    // Content tasks.
    'drupalx_graphql_install_content' => [],
    // Create consumers and keys.
    'drupalx_graphql_tasks_simple_oauth' => [],
  ];

  return $tasks;
}

/**
 * Create menu items.
 */
function _drupalx_graphql_create_menus() {
  // Main menu items.
  $main_menu_items = [
    ['title' => 'Home', 'uri' => 'internal:/welcome', 'expanded' => TRUE],
    ['title' => 'Features', 'uri' => 'internal:/features', 'expanded' => TRUE],
    ['title' => 'Articles', 'uri' => 'internal:/articles', 'expanded' => TRUE],
    ['title' => 'Get Started', 'uri' => 'internal:/get-started', 'expanded' => TRUE],
    ['title' => 'Contact', 'uri' => 'internal:/contact', 'expanded' => TRUE],
  ];

  // Footer menu items.
  $footer_menu_items = [
    ['title' => 'Privacy Policy', 'uri' => 'internal:/privacy', 'expanded' => FALSE],
    ['title' => 'Terms of Use', 'uri' => 'internal:/terms-of-use', 'expanded' => FALSE],
    ['title' => 'Contact', 'uri' => 'internal:/contact', 'expanded' => FALSE],
  ];

  // Create main menu links.
  $weight = 0;
  foreach ($main_menu_items as $item) {
    _drupalx_graphql_create_menu_link($item['title'], $item['uri'], 'main', $item['expanded'], $weight++);
  }

  // Create footer menu links.
  $weight = 0;
  foreach ($footer_menu_items as $item) {
    _drupalx_graphql_create_menu_link($item['title'], $item['uri'], 'footer', $item['expanded'], $weight++);
  }
}

/**
 * Helper function to create and save a menu link.
 */
function _drupalx_graphql_create_menu_link($title, $uri, $menu_name, $expanded, $weight) {
  $menu_link = MenuLinkContent::create([
    'title' => $title,
    'link' => ['uri' => $uri],
    'menu_name' => $menu_name,
    'expanded' => $expanded,
    'weight' => $weight,
  ]);
  $menu_link->save();
}

/**
 * Create media items.
 */
function _drupalx_graphql_create_media_items() {
  $media_names = [
    'card' => 'card.png',
    'stars' => 'stars.jpg',
    'bootstrap' => 'bootstrap.svg',
    'storybook' => 'storybook.svg',
    'quote-logo' => 'quote-logo.svg',
    'quote-thumb' => 'dries.jpg',
  ];

  $media_items = [];

  foreach ($media_names as $media_name => $file_name) {
    $image_path = \Drupal::service('extension.list.profile')->getPath('drupalx_graphql') . '/images/' . $file_name;
    $data = file_get_contents($image_path);
    $file = \Drupal::service('file.repository')->writeData($data, 'public://' . $file_name);
    $media = Media::create([
      'bundle' => 'image',
      'name' => $media_name,
      'field_image' => [
        'target_id' => $file->id(),
        'alt' => $media_name,
        'title' => $media_name,
      ],
    ]);

    $media->save();
    $media_items[$media_name] = $media;
  }

  return $media_items;
}

/**
 * Create a Hero paragraph.
 *
 * @param array $hero_info
 *   The hero info.
 *
 * @return \Drupal\paragraphs\Entity\Paragraph
 *   The Hero paragraph.
 */
function _drupalx_graphql_create_hero_paragraph(array $hero_info) {
  $paragraph = Paragraph::create([
    'type' => 'hero',
    'field_media' => [
      'target_id' => $hero_info['media']->id(),
    ],
    'field_hero_layout' => $hero_info['layout'],
  ]);

  if (!empty($hero_info['heading'])) {
    $paragraph->set('field_heading', [
      'value' => $hero_info['heading'],
      'format' => 'restricted_html',
    ]);
  }

  if (!empty($hero_info['summary'])) {
    $paragraph->set('field_summary', [
      'value' => $hero_info['summary'],
      'format' => 'basic_html',
    ]);
  }

  if (!empty($hero_info['link'])) {
    $paragraph->set('field_link', [
      'uri' => $hero_info['link']['uri'],
      'title' => $hero_info['link']['title'],
    ]);
  }

  $paragraph->save();
  return $paragraph;
}

/**
 * Create a Card Group paragraph.
 */
function _drupalx_graphql_create_card_group_paragraph($media_items) {
  $paragraph = Paragraph::create([
    'type' => 'card_group',
    'field_title' => 'Discover DrupalX',
  ]);

  $card_items = [
    [
      'title' => 'Storybook.js',
      'summary' => 'Learn how Storybook integration allows you to develop and test UI components in isolation.',
      'link' => [
        'uri' => 'https://storybook.js.org/',
        'title' => 'Learn more',
      ],
      'icon' => 'storybook',
    ],
    [
      'title' => 'Bootstrap 5',
      'summary' => 'Explore the latest features and components in the Bootstrap 5 framework.',
      'link' => [
        'uri' => 'https://getbootstrap.com/',
        'title' => 'Explore Bootstrap',
      ],
      'icon' => 'bootstrap',
    ],
    [
      'title' => 'Material Icons',
      'summary' => 'Discover the Material Icons library and how it can enhance your site design.',
      'link' => [
        'uri' => 'https://fonts.google.com/icons',
        'title' => 'View icons',
      ],
      'icon' => 'stars',
    ],
  ];

  foreach ($card_items as $info) {
    $card_paragraph = Paragraph::create([
      'type' => 'card',
      'field_title' => $info['title'],
      'field_media' => $media_items['card'],
      'field_summary' => $info['summary'],
      'field_link' => $info['link'],
    ]);
    $card_paragraph->save();
    $paragraph->field_card[] = [
      'target_id' => $card_paragraph->id(),
      'target_revision_id' => $card_paragraph->getRevisionId(),
    ];
  }

  $paragraph->save();
  return $paragraph;
}

/**
 * Create article nodes.
 */
function _drupalx_graphql_create_article_nodes($media_items, $tag_ids) {
  $titles = [
    'Article title 1',
    'Article title 2',
    'Article title 3',
    'Article title 4',
    'Article title 5',
    'Article title 6',
  ];

  foreach ($titles as $title) {
    $node = Node::create([
      'type' => 'article',
      'title' => $title,
      'uid' => 1,
      'status' => 1,
      'promote' => 1,
      'sticky' => 1,
      'field_subhead' => 'Why DrupalX',
      'field_media' => $media_items['card'],
      'field_thumbnail' => $media_items['card'],
      'field_tags' => [
        ['target_id' => $tag_ids[1]],
        ['target_id' => $tag_ids[2]],
      ],
      'field_summary' => 'Lorem ipsum dolor sit amet consectetur. Congue vel sagittis eu ullamcorper vel. Et et dui est ante tempor egestas pellentesque odio. Ornare erat lacus commodo porttitor ut enim. Ultricies mauris blandit in fermentum fringilla mollis risus ut.',
      'field_lead' => [
        'value' => '<p>Lorem ipsum dolor sit amet consectetur. Congue vel sagittis eu ullamcorper vel. Et et dui est ante tempor egestas pellentesque odio. Ornare erat lacus commodo porttitor ut enim. Ultricies mauris blandit in fermentum fringilla mollis risus ut. Nam eget eu suspendisse ut fermentum nascetur pretium lectus. Odio amet amet nam viverra hendrerit diam et. Nibh nunc in senectus odio tempor vitae id. Sit ut sit porta nisl enim.</p>',
        'format' => 'full_html',
      ],
      'body' => [
        'value' => '<h2>Lorem ipsum dolor sit amet</h2>
          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
          <p>Duis aute irure dolor in reprehenderit in voluptate velit esse cillum dolore eu fugiat nulla pariatur. Excepteur sint occaecat cupidatat non proident, sunt in culpa qui officia deserunt mollit anim id est laborum.</p>
          <p>&nbsp;</p>
          <h3>Vestibulum ante ipsum primis</h3>
          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
          <drupal-media data-align="center" data-caption="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat." data-entity-type="media" data-entity-uuid="' . $media_items['card']->uuid() . '" data-view-mode=""></drupal-media>
          <h3>Curabitur vel sem sit amet</h3>
          <p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat.</p>
          <drupal-media data-align="center" data-caption="Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed do eiusmod tempor incididunt ut labore et dolore magna aliqua. Ut enim ad minim veniam, quis nostrud exercitation ullamco laboris nisi ut aliquip ex ea commodo consequat." data-entity-type="media" data-entity-uuid="' . $media_items['card']->uuid() . '" data-view-mode=""></drupal-media>',
        'format' => 'full_html',
      ],
    ]);
    $node->save();
  }
}

/**
 * Create a Text paragraph.
 */
function _drupalx_graphql_create_text_paragraph() {
  $paragraph = Paragraph::create([
    'type' => 'text',
    'field_title' => 'Example Text',
    'field_body' => [
      'value' => '<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Sed mauris mi, aliquam in orci at, finibus malesuada elit. Vivamus ex ante, imperdiet nec odio ac, sollicitudin fermentum velit. Nunc vestibulum massa est, eu auctor libero pellentesque eu.</p><p>Nulla velit purus, varius quis velit aliquet, lobortis venenatis mauris. In non ligula eget ex semper pulvinar. Aliquam aliquet hendrerit auctor. Duis bibendum placerat risus, non commodo magna ornare id.</p>',
      'format' => 'full_html',
    ],
    'field_link' => [
      'uri' => 'internal:/',
      'title' => 'Read more',
    ],
  ]);
  $paragraph->save();
  return $paragraph;
}

/**
 * Create a Media paragraph.
 */
function _drupalx_graphql_create_media_paragraph($media_items) {
  $paragraph = Paragraph::create([
    'type' => 'media',
    'field_title' => 'Example Media',
    'field_media' => $media_items['card'],
  ]);
  $paragraph->save();
  return $paragraph;
}

/**
 * Create a Gallery paragraph.
 */
function _drupalx_graphql_create_gallery_paragraph($media_items) {
  $gallery_items = array_fill(0, 8, $media_items['card']);

  $paragraph = Paragraph::create([
    'type' => 'gallery',
    'field_body' => 'Lorem ipsum dolor sit amet consectetur adipiscing elit',
    'field_title' => 'Example Gallery',
    'field_media_item' => $gallery_items,
  ]);
  $paragraph->save();
  return $paragraph;
}

/**
 * Create a Carousel paragraph.
 */
function _drupalx_graphql_create_carousel_paragraph($media_items) {
  $paragraph = Paragraph::create([
    'type' => 'carousel',
  ]);

  $carousel_items = [
    [
      'title' => 'Featured Item 1',
      'summary' => 'Lorem ipsum dolor sit amet, consectetur adipiscing elit.',
      'thumb' => 'stars',
    ],
    [
      'title' => 'Featured Item 2',
      'summary' => 'Pellentesque habitant morbi tristique senectus et netus et malesuada fames ac turpis egestas.',
      'thumb' => 'stars',
    ],
    [
      'title' => 'Featured Item 3',
      'summary' => 'Vestibulum ac diam sit amet quam vehicula elementum sed sit amet dui.',
      'thumb' => 'stars',
    ],
  ];

  foreach ($carousel_items as $item) {
    $carousel_item = Paragraph::create([
      'type' => 'carousel_item',
      'field_title' => $item['title'],
      'field_media' => $media_items[$item['thumb']],
      'field_summary' => $item['summary'],
    ]);
    $carousel_item->save();
    $paragraph->field_carousel_item[] = [
      'target_id' => $carousel_item->id(),
      'target_revision_id' => $carousel_item->getRevisionId(),
    ];
  }

  $paragraph->save();
  return $paragraph;
}

/**
 * Create an Accordion paragraph.
 */
function _drupalx_graphql_create_accordion_paragraph() {
  $paragraph = Paragraph::create([
    'type' => 'accordion',
    'field_title' => 'Frequently Asked Questions',
  ]);

  $faq_headings = [
    'What is included with DrupalX?' => [
      'answer' => 'DrupalX includes pre-built Layout Builder blocks integrated with a starter theme built on Bootstrap 5. It also features Material Icons and is fully supported by Storybook, providing a comprehensive and cohesive development environment.',
    ],
    'How much can I customize?' => [
      'answer' => 'Everything in DrupalX can be customized. You can adjust configurations, modify every Storybook component, and alter or remove any Bootstrap inclusion to suit your specific needs.',
    ],
    'Is DrupalX accessible?' => [
      'answer' => 'Yes, DrupalX adheres to WCAG 2.0 AA accessibility guidelines.',
    ],
    'Can I see examples of other sites created with DrupalX?' => [
      'answer' => 'Of course. Explore how DrupalX can be used across various types of sites.',
      'link' => [
        'uri' => 'internal:/articles',
        'title' => 'Read DrupalX articles',
      ],
    ],
  ];

  foreach ($faq_headings as $heading => $info) {
    $accordion_item = Paragraph::create([
      'type' => 'accordion_item',
      'field_title' => $heading,
      'field_body' => [
        'value' => '<p>' . $info['answer'] . '</p>',
        'format' => 'full_html',
      ],
      'field_link' => $info['link'] ?? NULL,
    ]);
    $accordion_item->save();
    $paragraph->field_accordion_item[] = [
      'target_id' => $accordion_item->id(),
      'target_revision_id' => $accordion_item->getRevisionId(),
    ];
  }

  $paragraph->save();
  return $paragraph;
}

/**
 * Create a Quote paragraph.
 */
function _drupalx_graphql_create_quote_paragraph($media_items) {
  $paragraph = Paragraph::create([
    'type' => 'quote',
    'field_logo' => $media_items['quote-logo'],
    'field_thumb' => $media_items['quote-thumb'],
    'field_quote' => 'Bringing people together under a shared passion is at the heart of what Drupal does',
    'field_author' => 'Dries Buytaert',
    'field_job_title' => 'Drupal Founder, Acquia CTO/Co-Founder',
  ]);
  $paragraph->save();
  return $paragraph;
}

/**
 * Create an Embed paragrah.
 * 
 * @param bool $showTitle
 *   Whether to show the title.
 * 
 * @return \Drupal\paragraphs\Entity\Paragraph
 *   The Embed paragraph.
 */
function _drupalx_graphql_create_embed_paragraph($showTitle = TRUE) {
  $paragraph = Paragraph::create([
    'type' => 'embed',
    'field_script' => [
      'value' => '<iframe src="https://www.google.com/maps/embed?pb=!1m18!1m12!1m3!1d50704.05332036616!2d-122.12246645666515!3d37.413396126075966!2m3!1f0!2f0!3f0!3m2!1i1024!2i768!4f13.1!3m3!1m2!1s0x808fb7495bec0189%3A0x7c17d44a466baf9b!2sMountain%20View%2C%20CA!5e0!3m2!1sen!2sus!4v1716313314254!5m2!1sen!2sus" width="600" height="450" style="border:0;" allowfullscreen="" loading="lazy" referrerpolicy="no-referrer-when-downgrade"></iframe>',
      'format' => 'scripts',
    ],
  ]);
  if ($showTitle) {
    $paragraph->set('field_title', [
      'value' => 'Example Embed',
    ]);
  }

  $paragraph->save();
  return $paragraph;
}

/**
 * Create a Newsletter paragraph.
 */
function _drupalx_graphql_create_newsletter_paragraph() {
  // Create Newsletter paragraph.
  $paragraph = Paragraph::create([
    'type' => 'newsletter',
  ]);

  $paragraph->save();
  return $paragraph;
}

/**
 * Create a Side-by-side paragraph.
 *
 * @param array $info
 *   The paragraph info.
 *
 * @return \Drupal\paragraphs\Entity\Paragraph
 *   The created paragraph entity.
 */
function _drupalx_graphql_create_sidebyside_paragraph(array $info = []) {
  // Create 50/50 paragraph.
  $paragraph = Paragraph::create([
    'type' => 'sidebyside',
    'field_title' => $info['title'],
    'field_eyebrow' => !empty($info['eyebrow']) ? $info['eyebrow'] : '',
    'field_summary' => $info['summary'],
    'field_sidebyside_layout' => $info['layout'],
  ]);

  if (!empty($info['media'])) {
    $paragraph->set('field_media', [
      'target_id' => $info['media']->id(),
    ]);
  }

  if (!empty($info['link'])) {
    $paragraph->set('field_link', $info['link']);
  }

  $paragraph->save();
  return $paragraph;
}

/**
 * Create an Articles paragraph.
 *
 * @param bool $addTitle
 *   Whether to add a title to the paragraph.
 *
 * @return \Drupal\paragraphs\Entity\Paragraph
 *   The Articles paragraph.
 */
function _drupalx_graphql_create_articles_paragraph($addTitle = FALSE) {
  $paragraph = Paragraph::create([
    'type' => 'views',
    'field_views_ref' => [
      'target_id' => 'recent_cards',
      'display_id' => 'article_cards',
    ],
  ]);

  if ($addTitle) {
    $paragraph->set('field_title', [
      'value' => 'Recent Articles',
    ]);
  }

  $paragraph->save();
  return $paragraph;
}

/**
 * Callback function to install default profile content.
 */
function drupalx_graphql_install_content() {
  // Create an editor user.
  $user = User::create([
    'name' => 'editor',
    'mail' => '',
    'roles' => ['editor'],
    'status' => 1,
  ]);
  $user->save();

  // Create a previewer user.
  $user = User::create([
    'name' => 'previewer',
    'mail' => '',
    'roles' => ['previewer'],
    'status' => 1,
  ]);
  $user->save();

  $tag_ids = [];
  $tag_names = ['New feature', 'Announcement', 'Article'];

  // Create tags.
  foreach ($tag_names as $tag_name) {
    $term = Term::create([
      'vid' => 'tags',
      'name' => $tag_name,
    ]);
    $term->save();
    $tag_ids[] = $term->id();
  }

  // Create media items.
  $media_items = _drupalx_graphql_create_media_items();

  // Create 404 page.
  $node = Node::create([
    'type' => 'page',
    'title' => 'Oops! Page not found',
    'uid' => 1,
    'status' => 1,
    'promote' => 1,
    'sticky' => 1,
    'body' => [
      'value' => "<p>We're sorry, but the page you requested could not be found. Please check the URL and try again, or click the button below to return to the homepage.</p>
      <a href=\"/\">Return to homepage</a>",
      'format' => 'full_html',
    ],
    'path' => [
      'alias' => '/page/page-not-found',
      'pathauto' => 0,
    ],
  ]);

  $node->save();

  // Create 403 page.
  $node = Node::create([
    'type' => 'page',
    'title' => 'Access denied',
    'uid' => 1,
    'status' => 1,
    'promote' => 1,
    'sticky' => 1,
    'body' => [
      'value' => "<p>We're sorry, but you do not have permission to access this page. Please contact the site administrator if you believe this is an error, or click the button below to return to the homepage.</p>
      <a href=\"/\">Return to homepage</a>",
      'format' => 'full_html',
    ],
    'path' => [
      'alias' => '/page/access-denied',
      'pathauto' => 0,
    ],
  ]);

  $node->save();

  // Create Privacy page.
  $node = Node::create([
    'type' => 'page',
    'title' => 'Privacy Policy',
    'uid' => 1,
    'status' => 1,
    'promote' => 1,
    'sticky' => 1,
    'field_media' => [
      'target_id' => $media_items['card']->id(),
    ],
    'body' => [
      'value' => '<p>This Privacy Policy describes how we collect, use, and disclose information about you when you use our website and any related services (collectively, the "Services").</p>
      <p>&nbsp;</p>
      <h3>Information We Collect</h3>
      <p>We may collect information about you when you use our Services, including:</p>
      <ul>
        <li>Information you provide to us, such as your name, email address, and other contact information.</li>
        <li>Information we collect automatically, such as your IP address, browser type, and device type.</li>
        <li>Information we collect from third-party sources, such as social media platforms and marketing partners.</li>
      </ul>
      <p>&nbsp;</p>
      <h3>How We Use Your Information</h3>
      <p>We may use your information to:</p>
      <ul>
        <li>Provide and improve our Services.</li>
        <li>Respond to your inquiries and requests.</li>
        <li>Send you marketing communications.</li>
        <li>Comply with our legal and regulatory obligations.</li>
      </ul>
      <p>We may also share your information with third parties for the purposes described in this Privacy Policy.</p>
      <p>&nbsp;</p>
      <h3>How We Protect Your Information</h3>
      <p>We take reasonable measures to protect your information from unauthorized access, use, and disclosure. However, no method of transmission over the internet or electronic storage is completely secure, and we cannot guarantee absolute security.</p>
      <p>&nbsp;</p>
      <h3>Your Choices</h3>
      <p>You may have certain rights and choices with respect to your information, such as the right to access and correct your information. Please contact us using the information below if you have any questions or would like to exercise your rights.</p>
      <p>&nbsp;</p>
      <h3>Contact Us</h3>
      <p>If you have any questions or concerns about our Privacy Policy, please <a href="/contact-us">contact us</a>.</p>',
      'format' => 'full_html',
    ],
    'path' => [
      'alias' => '/privacy',
      'pathauto' => 0,
    ],
  ]);

  $node->save();

  // Create Terms of Use page.
  $node = Node::create([
    'type' => 'page',
    'title' => 'Terms of Use',
    'uid' => 1,
    'status' => 1,
    'promote' => 1,
    'sticky' => 1,
    'field_media' => [
      'target_id' => $media_items['card']->id(),
    ],
    'body' => [
      'value' => '<p>Welcome to our website (the "Site"). By accessing or using the Site, you agree to be bound by these Terms of Use (the "Agreement"). If you do not agree to these terms, you should not access or use the Site.</p>
      <p>&nbsp;</p>
      <h3>Use of the Site</h3>
      <p>You may use the Site only for lawful purposes and in accordance with this Agreement. You agree not to use the Site:</p>
      <ul>
        <li>In any way that violates any applicable federal, state, local, or international law or regulation.</li>
        <li>To transmit, or procure the sending of, any advertising or promotional material, including any "junk mail," "chain letter," "spam," or any other similar solicitation.</li>
        <li>To impersonate or attempt to impersonate us, our employees, another user, or any other person or entity.</li>
      </ul>
      <p>&nbsp;</p>
      <h3>Intellectual Property</h3>
      <p>The Site and its entire contents, features, and functionality (including but not limited to all information, software, text, displays, images, video, and audio) are owned by us, our licensors, or other providers of such material and are protected by United States and international copyright, trademark, patent, trade secret, and other intellectual property or proprietary rights laws.</p>
      <p>&nbsp;</p>
      <h3>Disclaimer of Warranties</h3>
      <p>The Site and its contents are provided "as is" and without warranties of any kind, whether express or implied. We do not warrant that the Site or any of its functions will be uninterrupted or error-free, that defects will be corrected, or that the Site or the servers that make it available are free of viruses or other harmful components.</p>
      <p>&nbsp;</p>
      <h3>Limitation of Liability</h3>
      <p>In no event will we be liable for any damages of any kind arising out of or in connection with your use of the Site, including but not limited to direct, indirect, incidental, consequential, or punitive damages, even if we have been advised of the possibility of such damages.</p>
      <p>&nbsp;</p>
      <h3>Indemnification</h3>
      <p>You agree to indemnify and hold us and our affiliates, licensors, and service providers harmless from any claims, liabilities, damages, judgments, awards, losses, costs, expenses, or fees (including reasonable attorneys\' fees) arising out of or relating to your violation of this Agreement or your use of the Site, including, but not limited to, your User Contributions, any use of the Site\'s content, services, and products other than as expressly authorized in this Agreement, or your use of any information obtained from the Site.</p>
      <p>&nbsp;</p>
      <h3>Changes to this Agreement</h3>
      <p>We may revise and update this Agreement from time to time in our sole discretion. All changes are effective immediately when we post them, and apply to all access to and use of the Site thereafter. Your continued use of the Site following the posting of revised Agreement means that you accept and agree to the changes.</p>
      <p>&nbsp;</p>
      <h3>Contact Us</h3>
      <p>If you have any questions or concerns about these Terms of Use, please <a href="/contact-us">contact us</a>.</p>',
      'format' => 'full_html',
    ],
    'path' => [
      'alias' => '/terms-of-use',
      'pathauto' => 0,
    ],
  ]);

  $node->save();

  // Create homepage node.
  $node = Node::create([
    'type' => 'layout',
    'title' => 'DrupalX - The Enterprise CMS Starter',
    'uid' => 1,
    'status' => 1,
    'promote' => 1,
    'sticky' => 1,
    'body' => [
      'value' => '',
      'format' => 'full_html',
    ],
    'field_hide_page_title' => TRUE,
    'path' => [
      'alias' => '/welcome',
      'pathauto' => 0,
    ],
  ]);

  // Create and add paragraphs to field_content.
  $paragraphs = [];

  // Hero paragraph.
  $hero_info = [
    'link' => [
      'uri' => 'https://drupalx-react.netlify.app/',
      'title' => 'See our demo',
    ],
    'media' => $media_items['card'],
    'heading' => 'The <strong>Ultimate</strong> CMS Starter Kit for <strong>Enterprise</strong> Developers',
    'summary' => '',
    'layout' => 'image_top',
  ];

  $paragraphs[] = _drupalx_graphql_create_hero_paragraph($hero_info);

  // Card group paragraph.
  $paragraphs[] = _drupalx_graphql_create_card_group_paragraph($media_items, 'stat', '');

  // Side by side paragraphs.
  $info_sidebyside = [
    [
      'title' => 'DrupalX Rapid Development',
      'eyebrow' => 'DrupalX Features',
      'link' => [
        'uri' => 'internal:/features',
        'title' => 'Explore features',
      ],
      'summary' => 'The DrupalX template offers top-tier development tools and components for building a site quickly and efficiently.',
      'layout' => 'right',
      'media' => $media_items['card'],
    ],
    [
      'title' => 'DrupalX Content Management',
      'eyebrow' => 'DrupalX Content',
      'link' => [
        'uri' => 'internal:/articles',
        'title' => 'Read DrupalX articles',
      ],
      'summary' => 'DrupalX provides a user-friendly editing experience with fully integrated layout builder components for seamless content management.',
      'layout' => 'left',
      'media' => $media_items['card'],
    ],
  ];

  foreach ($info_sidebyside as $info) {
    $paragraphs[] = _drupalx_graphql_create_sidebyside_paragraph($info);
  }

  // Quote paragraph.
  $paragraphs[] = _drupalx_graphql_create_quote_paragraph($media_items);

  // Accordion paragraph.
  $paragraphs[] = _drupalx_graphql_create_accordion_paragraph();

  // Add paragraphs to field_content.
  foreach ($paragraphs as $paragraph) {
    $node->field_content[] = [
      'target_id' => $paragraph->id(),
      'target_revision_id' => $paragraph->getRevisionId(),
    ];
  }

  $node->save();

  // Kitchen sink layout.
  $node = Node::create([
    'type' => 'layout',
    'title' => 'Kitchen Sink Layout',
    'field_hide_page_title' => TRUE,
    'uid' => 1,
    'status' => 1,
    'field_thumbnail' => [
      'target_id' => $media_items['card']->id(),
    ],
    'path' => [
      'alias' => '/kitchen-sink',
      'pathauto' => 0,
    ],
  ]);

  // Create and append paragraphs.
  $paragraphs = [
    _drupalx_graphql_create_hero_paragraph($hero_info),
    _drupalx_graphql_create_card_group_paragraph($media_items),
    _drupalx_graphql_create_text_paragraph(),
    _drupalx_graphql_create_embed_paragraph(),
    _drupalx_graphql_create_media_paragraph($media_items),
    _drupalx_graphql_create_gallery_paragraph($media_items),
    _drupalx_graphql_create_carousel_paragraph($media_items),
    _drupalx_graphql_create_accordion_paragraph(),
    _drupalx_graphql_create_quote_paragraph($media_items),
    _drupalx_graphql_create_newsletter_paragraph(),
    _drupalx_graphql_create_articles_paragraph(TRUE),
  ];

  // Side by side paragraphs.
  $info_sidebyside = [
    [
      'title' => 'DrupalX Rapid Development',
      'eyebrow' => 'DrupalX Features',
      'link' => [
        'uri' => 'internal:/features',
        'title' => 'Explore features',
      ],
      'summary' => 'The DrupalX template offers top-tier development tools and components for building a site quickly and efficiently.',
      'layout' => 'right',
      'media' => $media_items['card'],
    ],
    [
      'title' => 'DrupalX Content Management',
      'eyebrow' => 'DrupalX Content',
      'link' => [
        'uri' => 'internal:/articles',
        'title' => 'Read DrupalX articles',
      ],
      'summary' => 'DrupalX provides a user-friendly editing experience with fully integrated layout builder components for seamless content management.',
      'layout' => 'left',
      'media' => $media_items['card'],
    ],
  ];

  foreach ($info_sidebyside as $info) {
    $paragraphs[] = _drupalx_graphql_create_sidebyside_paragraph($info);
  }

  foreach ($paragraphs as $paragraph) {
    $node->field_content[] = [
      'target_id' => $paragraph->id(),
      'target_revision_id' => $paragraph->getRevisionId(),
    ];
  }

  $node->save();

  // Create Contact us page node.
  $node = Node::create([
    'type' => 'layout',
    'title' => 'Contact Us',
    'uid' => 1,
    'status' => 1,
    'promote' => 1,
    'sticky' => 1,
    'body' => [
      'value' => '',
      'format' => 'full_html',
    ],
    'field_hide_page_title' => TRUE,
    'path' => [
      'alias' => '/contact',
      'pathauto' => 0,
    ],
  ]);

  // Create and add paragraphs to field_content.
  $paragraphs = [];

  // Hero paragraph.
  $hero_info = [
    'media' => $media_items['card'],
    'heading' => "Contact Us",
    'summary' => 'Have a question about DrupalX? We\'re here to help! Drop us a message and we\'ll get back to you soon.',
    'layout' => 'image_top',
  ];

  $paragraphs[] = _drupalx_graphql_create_hero_paragraph($hero_info);
  $paragraphs[] = _drupalx_graphql_create_embed_paragraph(FALSE);

  foreach ($paragraphs as $paragraph) {
    $node->field_content[] = [
      'target_id' => $paragraph->id(),
      'target_revision_id' => $paragraph->getRevisionId(),
    ];
  }

  $node->save();

  // Create Features layout node.
  $node = Node::create([
    'type' => 'layout',
    'title' => 'Features',
    'uid' => 1,
    'status' => 1,
    'promote' => 1,
    'sticky' => 1,
    'body' => [
      'value' => '',
      'format' => 'full_html',
    ],
    'field_hide_page_title' => TRUE,
    'path' => [
      'alias' => '/features',
      'pathauto' => 0,
    ],
  ]);

  // Create and add paragraphs to field_content.
  $paragraphs = [];

  // Hero paragraph.
  $hero_info = [
    'media' => $media_items['card'],
    'heading' => "DrupalX Features",
    'summary' => '<p>DrupalX is a comprehensive system that provides a robust starting point for designers and developers to fully customize components.</p>',
    'layout' => 'image_bottom',
  ];

  $paragraphs[] = _drupalx_graphql_create_hero_paragraph($hero_info);

  // Side by side paragraphs.
  $info_sidebyside = [
    [
      'title' => 'Ultimate Flexibility',
      'eyebrow' => 'Customizable Components',
      'summary' => 'Each component in DrupalX is fully customizable, allowing you to create a unique site tailored to your organization\'s needs.',
      'layout' => 'right',
      'media' => $media_items['card'],
    ],
    [
      'title' => 'Easy Content Management',
      'eyebrow' => 'User-Friendly Editing',
      'summary' => 'Utilize over a dozen built-in layout builder components for seamless content management, powered by Bootstrap 5.',
      'layout' => 'left',
      'media' => $media_items['card'],
    ],
    [
      'title' => 'Accessibility First',
      'eyebrow' => 'WCAG 2.0 AA Standard',
      'summary' => 'Our solution adheres to WCAG 2.0 AA accessibility guidelines out of the box, ensuring an inclusive experience.',
      'layout' => 'right',
      'media' => $media_items['card'],
    ],
  ];

  foreach ($info_sidebyside as $info) {
    $paragraphs[] = _drupalx_graphql_create_sidebyside_paragraph($info);
  }

  // Add paragraphs to field_content.
  foreach ($paragraphs as $paragraph) {
    $node->field_content[] = [
      'target_id' => $paragraph->id(),
      'target_revision_id' => $paragraph->getRevisionId(),
    ];
  }

  $node->save();

  // Create Get Started layout node.
  $node = Node::create([
    'type' => 'layout',
    'title' => 'Get Started',
    'uid' => 1,
    'status' => 1,
    'promote' => 1,
    'sticky' => 1,
    'body' => [
      'value' => '',
      'format' => 'full_html',
    ],
    'field_hide_page_title' => TRUE,
    'path' => [
      'alias' => '/get-started',
      'pathauto' => 0,
    ],
  ]);

  // Create and add paragraphs to field_content.
  $paragraphs = [];

  // Hero paragraph.
  $hero_info = [
    'media' => $media_items['card'],
    'heading' => "Get Started",
    'summary' => 'Whether you\'re a designer or a developer, DrupalX provides the perfect foundation to start customizing to your specific needs.',
    'layout' => 'image_bottom',
  ];

  $paragraphs[] = _drupalx_graphql_create_hero_paragraph($hero_info);

  // Side by side paragraphs.
  $info_sidebyside = [
    [
      'title' => 'DrupalX for Designers',
      'eyebrow' => 'Bootstrap UI Kits',
      'summary' => 'Leverage a variety of Figma community templates built on Bootstrap 5 to jumpstart your design process.',
      'layout' => 'right',
      'link' => [
        'uri' => 'https://www.figma.com/community/search?resource_type=mixed&sort_by=relevancy&query=bootstrap+5&editor_type=all&price=all&creators=all',
        'title' => 'Browse Figma UI kits',
      ],
      'media' => $media_items['card'],
    ],
    [
      'title' => 'DrupalX for Developers',
      'eyebrow' => 'Project Template',
      'summary' => 'Visit our GitHub repository to download the DrupalX project template and start building your site today.',
      'layout' => 'left',
      'link' => [
        'uri' => 'https://github.com/drupalninja/drupalx-graphql',
        'title' => 'Find out more',
      ],
      'media' => $media_items['card'],
    ],
  ];

  foreach ($info_sidebyside as $info) {
    $paragraphs[] = _drupalx_graphql_create_sidebyside_paragraph($info);
  }

  // Add paragraphs to field_content.
  foreach ($paragraphs as $paragraph) {
    $node->field_content[] = [
      'target_id' => $paragraph->id(),
      'target_revision_id' => $paragraph->getRevisionId(),
    ];
  }

  $node->save();

  // Create Articles layout node.
  $node = Node::create([
    'type' => 'layout',
    'title' => 'Articles',
    'uid' => 1,
    'status' => 1,
    'promote' => 1,
    'sticky' => 1,
    'body' => [
      'value' => '',
      'format' => 'full_html',
    ],
    'field_hide_page_title' => TRUE,
    'path' => [
      'alias' => '/articles',
      'pathauto' => 0,
    ],
  ]);

  // Create and add paragraphs to field_content.
  $paragraphs = [];

  // Hero paragraph.
  $hero_info = [
    'media' => $media_items['card'],
    'heading' => "DrupalX Articles",
    'layout' => 'image_top',
  ];

  $paragraphs[] = _drupalx_graphql_create_hero_paragraph($hero_info);

  // Articles paragraph.
  $paragraphs[] = _drupalx_graphql_create_articles_paragraph();

  // Add paragraphs to field_content.
  foreach ($paragraphs as $paragraph) {
    $node->field_content[] = [
      'target_id' => $paragraph->id(),
      'target_revision_id' => $paragraph->getRevisionId(),
    ];
  }

  $node->save();

  // Create article nodes.
  _drupalx_graphql_create_article_nodes($media_items, $tag_ids);

  // Create menu items.
  _drupalx_graphql_create_menus();
}

/**
 * Callback function to generate Consumers.
 */
function drupalx_graphql_tasks_simple_oauth() {
  $random = new Random();
  $consumerStorage = \Drupal::entityTypeManager()->getStorage('consumer');

  $previewerClientId = Crypt::randomBytesBase64();
  $previewerClientSecret = $random->word(8);
  $consumerStorage->create([
    'client_id' => $previewerClientId,
    'client_secret ' => $previewerClientSecret,
    'label' => 'Previewer',
    'user_id' => 2,
    'third_party' => TRUE,
    'is_default' => FALSE,
    'roles' => ['previewer'],
  ])->save();

  $viewerClientId = Crypt::randomBytesBase64();
  $viewerClientSecret = $random->word(8);
  $consumerStorage->create([
    'client_id' => $viewerClientId,
    'client_secret ' => $viewerClientSecret,
    'label' => 'Viewer',
    'user_id' => 2,
    'third_party' => TRUE,
    'is_default' => FALSE,
    'roles' => ['viewer'],
  ])->save();

  \Drupal::service('simple_oauth.key.generator')->generateKeys('../');

  $messages = [
    'Consumers created successfully. Please save the following credentials.',
    '--- Previewer ---',
    'DRUPAL_CLIENT_ID=' . $previewerClientId,
    'DRUPAL_CLIENT_SECRET=' . $previewerClientSecret,
    '--- Viewer ---',
    'DRUPAL_CLIENT_ID=' . $viewerClientId,
    'DRUPAL_CLIENT_SECRET=' . $viewerClientSecret,
  ];

  // If file ../nextjs/.env exists then append the credentials.
  $envFile = '../nextjs/.env';
  if (file_exists($envFile)) {
    $envContents = file_get_contents($envFile);
    $envContents = preg_replace('/DRUPAL_CLIENT_ID=[^\n]+/', 'DRUPAL_CLIENT_ID=' . $previewerClientId, $envContents);
    $envContents = preg_replace('/DRUPAL_CLIENT_SECRET=[^\n]+/', 'DRUPAL_CLIENT_SECRET=' . $previewerClientSecret, $envContents);
    file_put_contents($envFile, $envContents);
    // Notify the user.
    $messages[] = 'Credentials added to ' . $envFile;
  }

  // Get current domain.
  $host = \Drupal::request()->getSchemeAndHttpHost();

  // If the domain ends with .ddev.site, force http.
  if (strpos($host, '.ddev.site') !== FALSE) {
    $host = preg_replace('/^https:/', 'http:', $host);
  }

  // If ../next.config.mjs exists then append the credentials.
  $nextConfigFile = '../nextjs/next.config.mjs';
  if (file_exists($nextConfigFile)) {
    $nextConfigContents = file_get_contents($nextConfigFile);
    $nextConfigContents = preg_replace('/externalDomain = \'[^\']+\'/', 'externalDomain = \'' . $host . '\'', $nextConfigContents);
    $nextConfigContents = preg_replace('/externalDomainHost = \'[^\']+\'/', 'externalDomainHost = \'' . parse_url($host, PHP_URL_HOST) . '\'', $nextConfigContents);
    file_put_contents($nextConfigFile, $nextConfigContents);
    // Notify the user.
    $messages[] = 'Domain added to ' . $nextConfigFile;
  }

  if (PHP_SAPI === 'cli') {
    echo PHP_EOL;
    foreach ($messages as $message) {
      echo $message . PHP_EOL;
    }
    echo PHP_EOL;
  }
  else {
    foreach ($messages as $message) {
      \Drupal::messenger()->addWarning($message);
    }
  }
}
