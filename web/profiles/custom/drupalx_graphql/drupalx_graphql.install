<?php

/**
 * @file
 * Install functions for the DrupalX GraphQL profile.
 */

use Drupal\Component\Utility\Crypt;
use Drupal\Component\Utility\Random;
use Drupal\media\Entity\Media;
use Drupal\taxonomy\Entity\Term;
use Drupal\user\Entity\User;

/**
 * Implements hook_install_tasks().
 */
function drupalx_graphql_install_tasks(&$install_state) {
  $tasks = [
    // Content tasks.
    'drupalx_graphql_install_content' => [],
    // Create consumers and keys.
    'drupalx_graphql_tasks_simple_oauth' => [],
  ];

  return $tasks;
}

/**
 * Create media items.
 */
function _drupalx_graphql_create_media_items() {
  $media_names = [
    'card' => 'card.jpg',
    'bootstrap' => 'bootstrap.svg',
    'storybook' => 'storybook.svg',
    'bootswatch' => 'bootswatch.svg',
    'quote-logo' => 'quote-logo.svg',
    'quote-thumb' => 'dries.jpg',
  ];

  $media_items = [];

  foreach ($media_names as $media_name => $file_name) {
    $image_path = \Drupal::service('extension.list.profile')->getPath('drupalx_graphql') . '/images/' . $file_name;
    $data = file_get_contents($image_path);
    $file = \Drupal::service('file.repository')->writeData($data, 'public://' . $file_name);
    $media = Media::create([
      'bundle' => 'image',
      'name' => $media_name,
      'field_image' => [
        'target_id' => $file->id(),
        'alt' => $media_name,
        'title' => $media_name,
      ],
    ]);

    $media->save();
    $media_items[$media_name] = $media;
  }

  return $media_items;
}

/**
 * Callback function to install default profile content.
 */
function drupalx_graphql_install_content() {
  // Create an editor user.
  $user = User::create([
    'name' => 'editor',
    'mail' => '',
    'roles' => ['editor'],
    'status' => 1,
  ]);
  $user->save();

  // Create a previewer user.
  $user = User::create([
    'name' => 'previewer',
    'mail' => '',
    'roles' => ['previewer'],
    'status' => 1,
  ]);
  $user->save();

  $tag_ids = [];
  $tag_names = ['New feature', 'Announcement', 'Article'];

  // Create tags.
  foreach ($tag_names as $tag_name) {
    $term = Term::create([
      'vid' => 'tags',
      'name' => $tag_name,
    ]);
    $term->save();
    $tag_ids[] = $term->id();
  }

  // Create media items.
  $media_items = _drupalx_graphql_create_media_items();

  // Create page nodes.
  _drupalx_graphql_create_page_nodes($media_items);

  // Create layout nodes.
  _drupalx_graphql_create_layout_nodes($media_items);

  // Create article nodes.
  _drupalx_graphql_create_article_nodes($media_items, $tag_ids);

  // Create menu items.
  _drupalx_graphql_create_menus();
}

/**
 * Callback function to generate Consumers.
 */
function drupalx_graphql_tasks_simple_oauth() {
  $random = new Random();
  $consumerStorage = \Drupal::entityTypeManager()->getStorage('consumer');

  $previewerClientId = Crypt::randomBytesBase64();
  $previewerClientSecret = $random->word(8);
  $consumerStorage->create([
    'client_id' => $previewerClientId,
    'client_secret ' => $previewerClientSecret,
    'label' => 'Previewer',
    'user_id' => 2,
    'third_party' => TRUE,
    'is_default' => FALSE,
    'roles' => ['previewer'],
  ])->save();

  $viewerClientId = Crypt::randomBytesBase64();
  $viewerClientSecret = $random->word(8);
  $consumerStorage->create([
    'client_id' => $viewerClientId,
    'client_secret ' => $viewerClientSecret,
    'label' => 'Viewer',
    'user_id' => 2,
    'third_party' => TRUE,
    'is_default' => FALSE,
    'roles' => ['viewer'],
  ])->save();

  $messages = [];

  // If sites/default/files/private is writable to generate keys.
  if (is_writable('sites/default/files/private')) {
    \Drupal::service('simple_oauth.key.generator')->generateKeys('sites/default/files/private');

    $messages = [
      'Consumers created successfully. Please save the following credentials.',
      '--- Previewer ---',
      'DRUPAL_CLIENT_ID=' . $previewerClientId,
      'DRUPAL_CLIENT_SECRET=' . $previewerClientSecret,
      '--- Viewer ---',
      'DRUPAL_CLIENT_ID=' . $viewerClientId,
      'DRUPAL_CLIENT_SECRET=' . $viewerClientSecret,
    ];
  }

  // Check to see if ./nextjs/ is writable.
  // If so go aahead and update configuration files.
  if (is_writable('../nextjs/')) {
    // Get current domain.
    $host = \Drupal::request()->getSchemeAndHttpHost();

    // If the domain ends with .ddev.site, force http.
    if (strpos($host, '.ddev.site') !== FALSE) {
      $host = preg_replace('/^https:/', 'http:', $host);
    }

    // If file ../nextjs/.env.example exists copy to ../nextjs/.env.
    $envFile = '../nextjs/.env';
    $envExampleFile = '../nextjs/.env.example';
    if (file_exists($envExampleFile) && !file_exists($envFile)) {
      copy($envExampleFile, '../nextjs/.env');
      // Notify the user.
      $messages[] = 'Copied ' . $envExampleFile . ' to ../nextjs/.env';
    }

    // If file ../nextjs/.env exists then append the credentials.
    if (file_exists($envFile)) {
      $envContents = file_get_contents($envFile);

      // Update DRUPAL_CLIENT_ID.
      $envContents = preg_replace(
        '/^DRUPAL_CLIENT_ID=.*$/m',
        'DRUPAL_CLIENT_ID=' . $previewerClientId,
        $envContents
      );

      // Update DRUPAL_CLIENT_SECRET.
      $envContents = preg_replace(
        '/^DRUPAL_CLIENT_SECRET=.*$/m',
        'DRUPAL_CLIENT_SECRET=' . $previewerClientSecret,
        $envContents
      );

      // Update DRUPAL_AUTH_URI.
      $envContents = preg_replace(
        '/^DRUPAL_AUTH_URI=.*$/m',
        'DRUPAL_AUTH_URI=' . $host,
        $envContents
      );

      // Update DRUPAL_GRAPHQL_URI.
      $envContents = preg_replace(
        '/^DRUPAL_GRAPHQL_URI=.*$/m',
        'DRUPAL_GRAPHQL_URI=' . $host . '/graphql',
        $envContents
      );

      // Write the updated contents back to the file.
      file_put_contents($envFile, $envContents);

      // Notify the user.
      $messages[] = 'Credentials added to ' . $envFile;
    }
  }

  if (empty($messages)) {
    return;
  }

  if (PHP_SAPI === 'cli') {
    echo PHP_EOL;
    foreach ($messages as $message) {
      echo $message . PHP_EOL;
    }
    echo PHP_EOL;
  }
  else {
    foreach ($messages as $message) {
      \Drupal::messenger()->addWarning($message);
    }
  }
}
