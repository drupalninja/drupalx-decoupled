"""The schema's entry-point for queries."""
type Query {
  """Load a Media entity by id."""
  media(
    """The id of the Media to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): MediaUnion

  """Load a Term entity by id."""
  term(
    """The id of the Term to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): TermUnion

  """Load a Node entity by id."""
  node(
    """The id of the Node to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): NodeUnion

  """Load a Paragraph entity by id."""
  paragraph(
    """The id of the Paragraph to load."""
    id: ID!

    """
    Optionally set the revision of the entity. Eg current, latest, or an ID.
    """
    revision: ID
  ): ParagraphUnion

  """Load a Menu by name."""
  menu(
    """Internal menu name. Eg MAIN"""
    name: MenuAvailable!
  ): Menu

  """Load a User entity by id."""
  user(
    """The id of the User to load."""
    id: ID!
  ): User

  """
  Get information about the currently authenticated user. NULL if not logged in.
  """
  viewer: User

  """Schema information."""
  info: SchemaInformation!

  """List of all MediaImage on the platform."""
  mediaImages(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): MediaImageConnection!

  """List of all MediaVideo on the platform."""
  mediaVideos(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): MediaVideoConnection!

  """List of all TermAuthor on the platform."""
  termAuthors(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): TermAuthorConnection!

  """List of all TermTag on the platform."""
  termTags(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): TermTagConnection!

  """List of all NodeArticle on the platform."""
  nodeArticles(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): NodeArticleConnection!

  """List of all NodeLanding on the platform."""
  nodeLandings(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): NodeLandingConnection!

  """List of all NodePage on the platform."""
  nodePages(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): NodePageConnection!

  """List of all ParagraphAccordion on the platform."""
  paragraphAccordions(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphAccordionConnection!

  """List of all ParagraphAccordionItem on the platform."""
  paragraphAccordionItems(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphAccordionItemConnection!

  """List of all ParagraphCard on the platform."""
  paragraphCards(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphCardConnection!

  """List of all ParagraphCardGroup on the platform."""
  paragraphCardGroups(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphCardGroupConnection!

  """List of all ParagraphCarousel on the platform."""
  paragraphCarousels(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphCarouselConnection!

  """List of all ParagraphCarouselItem on the platform."""
  paragraphCarouselItems(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphCarouselItemConnection!

  """List of all ParagraphEmbed on the platform."""
  paragraphEmbeds(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphEmbedConnection!

  """List of all ParagraphGallery on the platform."""
  paragraphGalleries(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphGalleryConnection!

  """List of all ParagraphHero on the platform."""
  paragraphHeroes(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphHeroConnection!

  """List of all ParagraphMedia on the platform."""
  paragraphMediaItems(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphMediaConnection!

  """List of all ParagraphNewsletter on the platform."""
  paragraphNewsletters(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphNewsletterConnection!

  """List of all ParagraphQuote on the platform."""
  paragraphQuotes(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphQuoteConnection!

  """List of all ParagraphSidebyside on the platform."""
  paragraphSidebysides(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphSidebysideConnection!

  """List of all ParagraphStatsItem on the platform."""
  paragraphStatsItems(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphStatsItemConnection!

  """List of all ParagraphText on the platform."""
  paragraphTexts(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphTextConnection!

  """List of all ParagraphView on the platform."""
  paragraphViews(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): ParagraphViewConnection!

  """List of all User on the platform."""
  users(
    """Returns the elements that come after the specified cursor."""
    after: Cursor

    """Returns the elements that come before the specified cursor."""
    before: Cursor

    """Returns up to the first n elements from the list."""
    first: Int

    """Returns up to the last n elements from the list."""
    last: Int

    """Reverse the order of the underlying list."""
    reverse: Boolean = false

    """Sort the underlying list by the given key."""
    sortKey: ConnectionSortKeys
  ): UserConnection!

  """Load a content preview."""
  preview(
    """The content UUID."""
    id: ID!

    """A preview access token."""
    token: String

    """
    Optionally set the response language. Eg en, ja, fr. Setting this langcode
    will change the current language of the entire response.
    """
    langcode: String
  ): NodeUnion

  """Load a Route by path."""
  route(
    """Internal path to load. Eg /about"""
    path: String!
  ): RouteUnion

  """Recent content."""
  recentCardsArticleCards(
    """The page number to display."""
    page: Int = 0
  ): RecentCardsArticleCardsResult
}

"""Entity type media."""
union MediaUnion = MediaImage | MediaVideo

"""Basic image media type."""
type MediaImage implements MediaInterface & MetaTagInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """Image"""
  image: Image

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!
}

"""Entity type media."""
interface MediaInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!
}

"""A DateTime object."""
type DateTime {
  """
  Type represents date and time as number of milliseconds from start of the UNIX epoch.
  """
  timestamp: Timestamp!

  """A field whose value exists in the standard IANA Time Zone Database."""
  timezone: TimeZone!

  """A string that will have a value of format ±hh:mm"""
  offset: UtcOffset!

  """RFC 3339 compliant time string."""
  time: Time!
}

"""
Type represents date and time as number of milliseconds from start of the UNIX epoch.
"""
scalar Timestamp

"""A field whose value exists in the standard IANA Time Zone Database."""
scalar TimeZone

"""A string that will have a value of format ±hh:mm"""
scalar UtcOffset

"""RFC 3339 compliant time string."""
scalar Time

"""A language definition provided by the CMS."""
type Language {
  """The language code."""
  id: ID

  """The language name."""
  name: String

  """The language direction."""
  direction: String
}

"""A meta tag element."""
union MetaTagUnion = MetaTagLink | MetaTagValue | MetaTagProperty | MetaTagScript

"""A meta link element."""
type MetaTagLink implements MetaTag {
  """The HTML tag for this meta element."""
  tag: String!

  """The meta tag element attributes."""
  attributes: MetaTagLinkAttributes!
}

"""A meta tag element."""
interface MetaTag {
  """The HTML tag for this meta element."""
  tag: String!
}

"""A meta link element's attributes."""
type MetaTagLinkAttributes {
  """Specifies the location of the linked document."""
  href: String

  """Specifies the location of the linked document."""
  hreflang: String

  """
  Specifies the relationship between the current document and the linked document.
  """
  rel: String

  """Specifies on what device the linked document will be displayed."""
  media: String

  """Specifies the size of the linked resource. Only for rel="icon"."""
  sizes: String

  """Specifies the media type of the linked document."""
  type: String
}

"""A meta content element."""
type MetaTagValue implements MetaTag {
  """The HTML tag for this meta element."""
  tag: String!

  """The meta tag element attributes."""
  attributes: MetaTagValueAttributes!
}

"""A meta content element's attributes."""
type MetaTagValueAttributes {
  """The name attribute of the meta tag."""
  name: String

  """The content attribute of the meta tag."""
  content: String
}

"""A meta property element."""
type MetaTagProperty implements MetaTag {
  """The HTML tag for this meta element."""
  tag: String!

  """The meta tag element attributes."""
  attributes: MetaTagPropertyAttributes!
}

"""A meta property element's attributes."""
type MetaTagPropertyAttributes {
  """The property attribute of the meta tag."""
  property: String

  """The content attribute of the meta tag."""
  content: String
}

"""A meta script element."""
type MetaTagScript implements MetaTag {
  """The HTML tag for this meta element."""
  tag: String!

  """The meta tag element attributes."""
  attributes: MetaTagScriptAttributes!

  """The content of the script tag."""
  content: String
}

"""A meta script element's attributes."""
type MetaTagScriptAttributes {
  """The type attribute of the script tag."""
  type: String

  """The src attribute of the script tag."""
  src: String

  """The integrity attribute of the script tag."""
  integrity: String
}

"""This entity has meta tags enabled."""
interface MetaTagInterface {
  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!
}

"""This entity is accessible over an Edge connection."""
interface EdgeNode {
  id: ID!
}

"""A image object to represent an managed file."""
type Image {
  """The URL of the image."""
  url: String!

  """The width of the image."""
  width: Int!

  """The height of the image."""
  height: Int!

  """The alt text of the image."""
  alt: String

  """The title text of the image."""
  title: String

  """The size of the image in bytes."""
  size: Int!

  """The mime type of the image."""
  mime: String

  """
  Contents of the image, if the mime is `image/svg+xml` and size <= `100 KB`.
  """
  svg: String

  """Image variations control different sizes and formats for images."""
  variations(styles: [ImageStyleAvailable]): [ImageStyleDerivative!]
}

"""List of image styles available to use."""
enum ImageStyleAvailable {
  """Hero Large"""
  HEROL

  """Hero Large 2x"""
  HEROLX2

  """Hero Medium"""
  HEROM

  """Hero Medium 2x"""
  HEROMX2

  """Hero Small"""
  HEROS

  """Hero Small 2x"""
  HEROSX2

  """1:1 Large (800 x 800)"""
  I11LARGE

  """1:1 Medium (400 x 400)"""
  I11MEDIUM

  """1:1 Small"""
  I11SMALL

  """16:9 Large 2x (1280 x 720)"""
  I169LARGE2X

  """16:9 Extra Large (720 x 405)"""
  I169XLARGE

  """4:3 Large (800 x 600)"""
  I43LARGE

  """4:3 Large 2x (1280 x 960)"""
  I43LARGE2X

  """4:3 Medium (640 x 480)"""
  I43MEDIUM

  """4:3 Small (420x 315)"""
  I43SMALL

  """Large (480×480)"""
  LARGE

  """Linkit result thumbnail"""
  LINKIT_RESULT_THUMBNAIL

  """Media Library thumbnail (220×220)"""
  MEDIA_LIBRARY

  """Medium (220×220)"""
  MEDIUM

  """Thumbnail (100×100)"""
  THUMBNAIL
}

"""ImageStyle derivatives for an Image."""
type ImageStyleDerivative {
  name: String!
  url: String!
  width: Int!
  height: Int!
}

"""Upload remote video media."""
type MediaVideo implements MediaInterface & MetaTagInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time the media item was last edited."""
  changed: DateTime!

  """The time the media item was created."""
  created: DateTime!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """URL alias"""
  path: String!

  """Remote video URL"""
  source: String!

  """Published"""
  status: Boolean!
}

"""Entity type taxonomy_term."""
union TermUnion = TermAuthor | TermTag

"""Content authors."""
type TermAuthor implements TermInterface & MetaTagInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the term was last edited."""
  changed: DateTime!

  """Description"""
  description: Text!

  """The term language code."""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """The parents of this term."""
  parent: TermUnion

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!

  """The weight of this term in relation to other terms."""
  weight: Int!
}

"""Entity type taxonomy_term."""
interface TermInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the term was last edited."""
  changed: DateTime!

  """Description"""
  description: Text!

  """The term language code."""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """The parents of this term."""
  parent: TermUnion

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!

  """The weight of this term in relation to other terms."""
  weight: Int!
}

"""A processed text format defined by the CMS."""
type Text {
  """The raw text value."""
  value: String

  """The processed text value."""
  processed: Html

  """The text format used to process the text value."""
  format: String
}

"""
An HTML string

Content of this type is deemed safe by the server for raw output given the
origin and the context of its usage. The HTML can still contain scripts or style
tags where the creating user had permission to input these.
"""
scalar Html

"""Use tags to group articles on similar topics into categories."""
type TermTag implements TermInterface & MetaTagInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the term was last edited."""
  changed: DateTime!

  """Description"""
  description: Text!

  """The term language code."""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """Name"""
  name: String!

  """The parents of this term."""
  parent: TermUnion

  """URL alias"""
  path: String!

  """Published"""
  status: Boolean!

  """The weight of this term in relation to other terms."""
  weight: Int!
}

"""Entity type node."""
union NodeUnion = NodeArticle | NodeLanding | NodePage

"""
The Article content type represents a written piece published in a newspaper,
magazine, or online platform. It serves as a platform for sharing information,
insights, stories, or opinions on a specific topic, catering to diverse
audiences and interests.
"""
type NodeArticle implements NodeInterface & MetaTagInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The author of this content."""
  author: User

  """Authors"""
  authors: [TermUnion!]

  """Body"""
  body: TextSummary

  """The time that the node was last edited."""
  changed: DateTime!

  """The date and time that the content was created."""
  created: DateTime!

  """Language"""
  langcode: Language!

  """Article lead paragraph."""
  lead: Text!

  """Media"""
  media: MediaUnion!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """URL alias"""
  path: String!

  """Promoted to front page"""
  promote: Boolean!

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """Subhead"""
  subhead: String

  """Summary"""
  summary: String

  """Tags"""
  tags: [TermUnion!]

  """Thumbnail"""
  thumbnail: MediaUnion

  """Title"""
  title: String!
}

"""Entity type node."""
interface NodeInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The author of this content."""
  author: User

  """The time that the node was last edited."""
  changed: DateTime!

  """The date and time that the content was created."""
  created: DateTime!

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """URL alias"""
  path: String!

  """Promoted to front page"""
  promote: Boolean!

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """Title"""
  title: String!
}

"""Entity type user."""
type User implements UserInterface & MetaTagInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the user was last edited."""
  changed: DateTime!

  """The time that the user was created."""
  created: DateTime!

  """The email of this user."""
  mail: Email

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """The name of this user."""
  name: String!

  """URL alias"""
  path: String!

  """The roles the user has."""
  roles: [UserRoles!]

  """Whether the user is active or blocked."""
  status: UserStatus!
}

"""Entity type user."""
interface UserInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the user was last edited."""
  changed: DateTime!

  """The time that the user was created."""
  created: DateTime!

  """The email of this user."""
  mail: Email

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """The name of this user."""
  name: String!

  """URL alias"""
  path: String!

  """The roles the user has."""
  roles: [UserRoles!]

  """Whether the user is active or blocked."""
  status: UserStatus!
}

"""An email address."""
scalar Email

"""User roles."""
scalar UserRoles

"""Whether the user is active or blocked."""
enum UserStatus {
  """An active user is able to login on the platform and view content"""
  ACTIVE

  """
  A blocked user is unable to access the platform, although their content will still be visible until it's deleted.
  """
  BLOCKED
}

"""A processed text format with summary defined by the CMS."""
type TextSummary {
  """The raw text value."""
  value: String

  """The processed text value."""
  processed: Html

  """The text format used to process the text value."""
  format: String

  """The processed text summary."""
  summary: Html
}

"""
The Layout Page empowers you to create dynamic and visually appealing page
layouts using Layout Builder's intuitive drag-and-drop interface. Whether you're
designing landing pages, product showcases, or blog layouts, this feature-rich
tool offers unparalleled flexibility and customization options.
"""
type NodeLanding implements NodeInterface & MetaTagInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The author of this content."""
  author: User

  """The time that the node was last edited."""
  changed: DateTime!

  """Components"""
  content: [ParagraphUnion!]!

  """The date and time that the content was created."""
  created: DateTime!

  """Optionally hide page title."""
  hidePageTitle: Boolean

  """Language"""
  langcode: Language!

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """URL alias"""
  path: String!

  """Promoted to front page"""
  promote: Boolean!

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """Summary"""
  summary: String

  """Thumbnail"""
  thumbnail: MediaUnion

  """Title"""
  title: String!
}

"""Entity type paragraph."""
union ParagraphUnion = ParagraphAccordion | ParagraphAccordionItem | ParagraphCard | ParagraphCardGroup | ParagraphCarousel | ParagraphCarouselItem | ParagraphEmbed | ParagraphGallery | ParagraphHero | ParagraphMedia | ParagraphNewsletter | ParagraphQuote | ParagraphSidebyside | ParagraphStatsItem | ParagraphText | ParagraphView

"""
The Accordion component is ideal for rendering FAQs or similar title-description
pairings, allowing users to expand and collapse sections for a clean, organized
"""
type ParagraphAccordion implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """List of title/description pairings used to populate the accordion."""
  accordionItem: [ParagraphUnion!]!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!

  """Provide the primary heading for the accordion."""
  title: String
}

"""Entity type paragraph."""
interface ParagraphInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!
}

"""Title, description pairing to be used inside of an accordion."""
type ParagraphAccordionItem implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Item description."""
  body: TextSummary!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """
  Optional call to action link that is exposed when the item is expanded.
  """
  link: Link

  """Published"""
  status: Boolean!

  """The primary heading for item description."""
  title: String!
}

"""A link."""
type Link {
  """The title of the link."""
  title: String

  """The URL of the link."""
  url: String

  """Whether the link is internal to this website."""
  internal: Boolean!
}

"""A teaser to a piece of content, local or external."""
type ParagraphCard implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Link"""
  link: Link

  """Media"""
  media: MediaUnion

  """Published"""
  status: Boolean!

  """Summary"""
  summary: String

  """Title"""
  title: String!
}

"""
The Card Group Feature allows editors to highlight collections of content items
using grouped card layouts, ideal for showcasing articles, products, services,
or other content types.
"""
type ParagraphCardGroup implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Card"""
  card: [ParagraphUnion!]!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!

  """Provide the primary heading for the card list."""
  title: String
}

"""
The Carousel component lets you rotate through a collection of media items in an
interactive slider, perfect for showcasing related content in limited space to
enhance user engagement and visual appeal.
"""
type ParagraphCarousel implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Build a collection of items for the carousel component."""
  carouselItem: [ParagraphUnion!]!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!
}

"""Carousel item for the Carousel component."""
type ParagraphCarouselItem implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Carousel media item."""
  media: MediaUnion!

  """Published"""
  status: Boolean!

  """Carousel item summary."""
  summary: String

  """Title"""
  title: String
}

"""
The Embed Component seamlessly integrates third-party scripts into your web
pages, ideal for incorporating videos, social media feeds, maps, and other
interactive elements.
"""
type ParagraphEmbed implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Paste the third-party script embed here."""
  script: Text

  """Published"""
  status: Boolean!

  """Provide the primary heading for the embedded content."""
  title: String
}

"""
The Media Gallery component showcases a collection of media items, including
images, in a visually appealing and organized manner, perfect for portfolios,
photo albums, and product showcases.
"""
type ParagraphGallery implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Body"""
  body: TextSummary

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Add collection of media library items."""
  mediaItem: [MediaUnion!]!

  """Published"""
  status: Boolean!

  """Title"""
  title: String
}

"""
The Hero Component, designed for impactful promotional teasers with large images
at the top of a page, highlights key messages, announcements, or featured
"""
type ParagraphHero implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """Heading"""
  heading: Text

  """Hero Layout"""
  heroLayout: String!

  """The paragraphs entity language code."""
  langcode: Language!

  """Optional call to action link."""
  link: Link

  """Optional link."""
  link2: Link

  """Featured media item for the hero."""
  media: MediaUnion

  """Published"""
  status: Boolean!

  """Provide the teaser summary for the hero."""
  summary: Text
}

"""
The Media Component allows you to place images, videos, or audio files on your
web pages, seamlessly integrating media assets to enhance the user experience.
"""
type ParagraphMedia implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Media library item."""
  media: MediaUnion!

  """Published"""
  status: Boolean!

  """Provide the primary heading for an embedded media item."""
  title: String
}

"""
The Newsletter Form Component seamlessly integrates a custom signup form into
web pages, streamlining subscriber information collection to build and engage
your audience effectively.
"""
type ParagraphNewsletter implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!

  """Newsletter summary."""
  summary: Text

  """Newsletter title."""
  title: String!
}

"""
The Quote Component effectively highlights testimonials or impactful statements
on web pages, adding credibility by showcasing customer feedback, endorsements,
or memorable phrases.
"""
type ParagraphQuote implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Author of the quote."""
  author: String!

  """The time that the Paragraph was created."""
  created: DateTime!

  """Title of the author."""
  jobTitle: String

  """The paragraphs entity language code."""
  langcode: Language!

  """Logo"""
  logo: MediaUnion

  """Author quote or testimonial."""
  quote: String!

  """Published"""
  status: Boolean!

  """Thumb"""
  thumb: MediaUnion
}

"""
A side-by-side teaser visually previews content with an image or video on one
side and a brief text summary or call-to-action on the other, creating an
engaging and balanced presentation.
"""
type ParagraphSidebyside implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """Provide a short label for this content."""
  eyebrow: String

  """The paragraphs entity language code."""
  langcode: Language!

  """Provide an internal or external link."""
  link: Link

  """Embed a media item from the media library."""
  media: MediaUnion!

  """Select the display layout for this component."""
  sidebysideLayout: String!

  """Published"""
  status: Boolean!

  """Provide a brief description of the content being featured."""
  summary: Text!

  """Provide the primary heading for the Side-by-side block."""
  title: String!
}

"""A list of title + summaries that belong to the stats block."""
type ParagraphStatsItem implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """Custom Icon"""
  customIcon: MediaUnion

  """The paragraphs entity language code."""
  langcode: Language!

  """Published"""
  status: Boolean!

  """Summary"""
  summary: String!

  """Title"""
  title: String!
}

"""
The Text Block Component offers a versatile solution for displaying textual
content on web pages, seamlessly incorporating information, narratives, or
instructions into your design.
"""
type ParagraphText implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """Body"""
  body: TextSummary!

  """The time that the Paragraph was created."""
  created: DateTime!

  """Provide a short label for this content."""
  eyebrow: String

  """The paragraphs entity language code."""
  langcode: Language!

  """Optional CTA link."""
  link: Link

  """Optional link."""
  link2: Link

  """Published"""
  status: Boolean!

  """Layout"""
  textLayout: String!

  """Provide the primary heading for the text content."""
  title: String
}

"""
The Views Component renders Drupal views directly on web pages, ideal for
displaying dynamic content lists like news articles, blog posts, and product
"""
type ParagraphView implements ParagraphInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The time that the Paragraph was created."""
  created: DateTime!

  """The paragraphs entity language code."""
  langcode: Language!

  """Optional call to action link."""
  link: Link

  """Published"""
  status: Boolean!

  """Provide the primary heading for the list view."""
  title: String

  """
  This is a viewfield query proxy. Page size and contextual filters are applied
  within the CMS. See the actual view base query for more documentation on
  filters and options available. Views Reference
  """
  viewsRef(
    """If enabled: The page number to display."""
    page: Int

    """If enabled: The number of items skipped from beginning of this view."""
    offset: Int

    """
    If enabled: The filters to apply to this view. Filters may not apply unless exposed.
    """
    filter: [KeyValueInput]

    """If enabled: Sort the view by this key."""
    sortKey: String

    """If enabled: Sort the view direction."""
    sortDir: SortDirection
  ): ViewResultUnion!
}

"""Generic input for key-value pairs."""
input KeyValueInput {
  key: String!
  value: String
}

"""Sort direction."""
enum SortDirection {
  """Ascending"""
  ASC

  """Descending"""
  DESC
}

"""All available view result types."""
union ViewResultUnion = RecentCardsArticleCardsResult

"""Recent content."""
type RecentCardsArticleCardsResult implements View {
  """The ID of the view."""
  id: ID!

  """The machine name of the view."""
  view: String!

  """The machine name of the display."""
  display: String!

  """The language code of the view."""
  langcode: String

  """The human friendly label of the view."""
  label: String

  """The description of the view."""
  description: String

  """Information about the page in the view."""
  pageInfo: ViewPageInfo!

  """The results of the view."""
  results: [NodeUnion!]!
}

"""Views represent collections of curated data from the CMS."""
interface View {
  """The ID of the view."""
  id: ID!

  """The machine name of the view."""
  view: String!

  """The machine name of the display."""
  display: String!

  """The language code of the view."""
  langcode: String

  """The human friendly label of the view."""
  label: String

  """The description of the view."""
  description: String

  """Information about the page in the view."""
  pageInfo: ViewPageInfo!
}

"""Information about the page in a view."""
type ViewPageInfo {
  """Any result offset being used."""
  offset: Int!

  """The current page being returned."""
  page: Int!

  """How many results per page."""
  pageSize: Int!

  """How many results total."""
  total: Int!
}

"""
The Basic Page serves as a platform for displaying static content on your
website, such as an 'About Us' page, contact information, or general company
information. It provides a simple and straightforward layout to convey essential
information to visitors.
"""
type NodePage implements NodeInterface & MetaTagInterface & EdgeNode {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The author of this content."""
  author: User

  """Body"""
  body: TextSummary

  """The time that the node was last edited."""
  changed: DateTime!

  """The date and time that the content was created."""
  created: DateTime!

  """Language"""
  langcode: Language!

  """Add an optional hero image to this page."""
  media: MediaUnion

  """The computed meta tags for the entity."""
  metatag: [MetaTagUnion!]!

  """URL alias"""
  path: String!

  """Promoted to front page"""
  promote: Boolean!

  """Published"""
  status: Boolean!

  """Sticky at top of lists"""
  sticky: Boolean!

  """Summary"""
  summary: String

  """Thumbnail"""
  thumbnail: MediaUnion

  """Title"""
  title: String!
}

"""List of menus available to load."""
enum MenuAvailable {
  """Footer"""
  FOOTER

  """Main navigation"""
  MAIN
}

"""Entity type menu."""
type Menu implements MenuInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The menu items."""
  items: [MenuItem!]!

  """The menu name."""
  name: String!
}

"""Entity type menu."""
interface MenuInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The menu items."""
  items: [MenuItem!]!

  """The menu name."""
  name: String!
}

"""A menu item defined in the CMS."""
type MenuItem {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!

  """The title of the menu item."""
  title: String!

  """The description of the menu item."""
  description: String

  """The URL of the menu item."""
  url: String

  """The language of the menu item."""
  langcode: Language!

  """Whether this menu item links to an internal route."""
  internal: Boolean!

  """Whether this menu item is intended to be expanded."""
  expanded: Boolean!

  """Attributes of this menu item."""
  attributes: MenuItemAttributes!

  """Child menu items of this menu item."""
  children: [MenuItem!]!

  """
  The route this menu item uses. Route loading can be disabled per menu type.
  """
  route: RouteUnion
}

"""Menu item options set within the CMS."""
type MenuItemAttributes {
  class: String
}

"""Route types that can exist in the system."""
union RouteUnion = RouteInternal | RouteExternal | RouteRedirect

"""Route within this website."""
type RouteInternal implements Route {
  """URL of this route."""
  url: String!

  """Whether this route is internal or external."""
  internal: Boolean!

  """Breadcrumb links for this route."""
  breadcrumbs: [Link!]

  """Content assigned to this route."""
  entity: RouteEntityUnion
}

"""Routes represent incoming requests that resolve to content."""
interface Route {
  """URL of this route."""
  url: String!

  """Whether this route is internal or external."""
  internal: Boolean!
}

"""A list of possible entities that can be returned by URL."""
union RouteEntityUnion = MediaImage | MediaVideo | TermAuthor | TermTag | NodeArticle | NodeLanding | NodePage

"""Route outside of this website."""
type RouteExternal implements Route {
  """URL of this route."""
  url: String!

  """Whether this route is internal or external."""
  internal: Boolean!
}

"""Redirect to another URL with status."""
type RouteRedirect implements Route {
  """URL of this route."""
  url: String!

  """Whether this route is internal or external."""
  internal: Boolean!

  """Suggested status for redirect. Eg 301."""
  status: Int!

  """Utility prop. Always true for redirects."""
  redirect: Boolean!
}

"""Schema information provided by the system."""
type SchemaInformation {
  """The schema description."""
  description: String

  """The internal path to the front page."""
  home: String

  """The schema version."""
  version: String

  """List of fragments available."""
  fragments(
    """The entity type to filter fragments for."""
    entity: String

    """The bundle type to filter fragments for."""
    bundle: String

    """Include dependencies in the result."""
    withDependencies: Boolean
  ): [SchemaFragment!]!
}

"""A fragment representing a type within the schema."""
type SchemaFragment {
  """The scheme type of the fragment."""
  type: String!

  """The name of the fragment."""
  name: String!

  """The base graphql type."""
  class: String!

  """The fragment content."""
  content: String

  """The entity type of the fragment."""
  entity: String

  """The bundle type of the fragment."""
  bundle: String

  """The list of fragments this fragment depends on."""
  dependencies: [String]
}

"""A cursor for use in pagination."""
scalar Cursor

"""Choose how your sorts will occur and on which field."""
enum ConnectionSortKeys {
  """Sort by creation date"""
  CREATED_AT

  """Sort by updated date"""
  UPDATED_AT

  """Sort by entity title."""
  TITLE

  """Sort by sticky status."""
  STICKY

  """Sort by promoted status."""
  PROMOTED

  """Sort by term weight."""
  WEIGHT
}

"""A paginated set of results for MediaImage."""
type MediaImageConnection implements Connection {
  edges: [MediaImageEdge!]!
  nodes: [MediaImage!]!
  pageInfo: ConnectionPageInfo!
}

"""A paginated set of results."""
interface Connection {
  """The edges of this connection."""
  edges: [Edge!]!

  """The nodes of the edges of this connection."""
  nodes: [EdgeNode!]!

  """Information to aid in pagination."""
  pageInfo: ConnectionPageInfo!
}

"""
An edge in a connection.
Provides the cursor to fetch data based on the position of the associated
node. Specific edge implementations may provide more information about the
relationship they represent.
"""
interface Edge {
  cursor: Cursor!
  node: EdgeNode!
}

"""Information about the page in a connection."""
type ConnectionPageInfo {
  """Whether there are more pages in this connection."""
  hasNextPage: Boolean!

  """Whether there are previous pages in this connection."""
  hasPreviousPage: Boolean!

  """The cursor for the first element in this page."""
  startCursor: Cursor

  """The cursor for the last element in this page."""
  endCursor: Cursor
}

"""Edge for MediaImage."""
type MediaImageEdge implements Edge {
  cursor: Cursor!
  node: MediaImage!
}

"""A paginated set of results for MediaVideo."""
type MediaVideoConnection implements Connection {
  edges: [MediaVideoEdge!]!
  nodes: [MediaVideo!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for MediaVideo."""
type MediaVideoEdge implements Edge {
  cursor: Cursor!
  node: MediaVideo!
}

"""A paginated set of results for TermAuthor."""
type TermAuthorConnection implements Connection {
  edges: [TermAuthorEdge!]!
  nodes: [TermAuthor!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for TermAuthor."""
type TermAuthorEdge implements Edge {
  cursor: Cursor!
  node: TermAuthor!
}

"""A paginated set of results for TermTag."""
type TermTagConnection implements Connection {
  edges: [TermTagEdge!]!
  nodes: [TermTag!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for TermTag."""
type TermTagEdge implements Edge {
  cursor: Cursor!
  node: TermTag!
}

"""A paginated set of results for NodeArticle."""
type NodeArticleConnection implements Connection {
  edges: [NodeArticleEdge!]!
  nodes: [NodeArticle!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for NodeArticle."""
type NodeArticleEdge implements Edge {
  cursor: Cursor!
  node: NodeArticle!
}

"""A paginated set of results for NodeLanding."""
type NodeLandingConnection implements Connection {
  edges: [NodeLandingEdge!]!
  nodes: [NodeLanding!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for NodeLanding."""
type NodeLandingEdge implements Edge {
  cursor: Cursor!
  node: NodeLanding!
}

"""A paginated set of results for NodePage."""
type NodePageConnection implements Connection {
  edges: [NodePageEdge!]!
  nodes: [NodePage!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for NodePage."""
type NodePageEdge implements Edge {
  cursor: Cursor!
  node: NodePage!
}

"""A paginated set of results for ParagraphAccordion."""
type ParagraphAccordionConnection implements Connection {
  edges: [ParagraphAccordionEdge!]!
  nodes: [ParagraphAccordion!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphAccordion."""
type ParagraphAccordionEdge implements Edge {
  cursor: Cursor!
  node: ParagraphAccordion!
}

"""A paginated set of results for ParagraphAccordionItem."""
type ParagraphAccordionItemConnection implements Connection {
  edges: [ParagraphAccordionItemEdge!]!
  nodes: [ParagraphAccordionItem!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphAccordionItem."""
type ParagraphAccordionItemEdge implements Edge {
  cursor: Cursor!
  node: ParagraphAccordionItem!
}

"""A paginated set of results for ParagraphCard."""
type ParagraphCardConnection implements Connection {
  edges: [ParagraphCardEdge!]!
  nodes: [ParagraphCard!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphCard."""
type ParagraphCardEdge implements Edge {
  cursor: Cursor!
  node: ParagraphCard!
}

"""A paginated set of results for ParagraphCardGroup."""
type ParagraphCardGroupConnection implements Connection {
  edges: [ParagraphCardGroupEdge!]!
  nodes: [ParagraphCardGroup!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphCardGroup."""
type ParagraphCardGroupEdge implements Edge {
  cursor: Cursor!
  node: ParagraphCardGroup!
}

"""A paginated set of results for ParagraphCarousel."""
type ParagraphCarouselConnection implements Connection {
  edges: [ParagraphCarouselEdge!]!
  nodes: [ParagraphCarousel!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphCarousel."""
type ParagraphCarouselEdge implements Edge {
  cursor: Cursor!
  node: ParagraphCarousel!
}

"""A paginated set of results for ParagraphCarouselItem."""
type ParagraphCarouselItemConnection implements Connection {
  edges: [ParagraphCarouselItemEdge!]!
  nodes: [ParagraphCarouselItem!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphCarouselItem."""
type ParagraphCarouselItemEdge implements Edge {
  cursor: Cursor!
  node: ParagraphCarouselItem!
}

"""A paginated set of results for ParagraphEmbed."""
type ParagraphEmbedConnection implements Connection {
  edges: [ParagraphEmbedEdge!]!
  nodes: [ParagraphEmbed!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphEmbed."""
type ParagraphEmbedEdge implements Edge {
  cursor: Cursor!
  node: ParagraphEmbed!
}

"""A paginated set of results for ParagraphGallery."""
type ParagraphGalleryConnection implements Connection {
  edges: [ParagraphGalleryEdge!]!
  nodes: [ParagraphGallery!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphGallery."""
type ParagraphGalleryEdge implements Edge {
  cursor: Cursor!
  node: ParagraphGallery!
}

"""A paginated set of results for ParagraphHero."""
type ParagraphHeroConnection implements Connection {
  edges: [ParagraphHeroEdge!]!
  nodes: [ParagraphHero!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphHero."""
type ParagraphHeroEdge implements Edge {
  cursor: Cursor!
  node: ParagraphHero!
}

"""A paginated set of results for ParagraphMedia."""
type ParagraphMediaConnection implements Connection {
  edges: [ParagraphMediaEdge!]!
  nodes: [ParagraphMedia!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphMedia."""
type ParagraphMediaEdge implements Edge {
  cursor: Cursor!
  node: ParagraphMedia!
}

"""A paginated set of results for ParagraphNewsletter."""
type ParagraphNewsletterConnection implements Connection {
  edges: [ParagraphNewsletterEdge!]!
  nodes: [ParagraphNewsletter!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphNewsletter."""
type ParagraphNewsletterEdge implements Edge {
  cursor: Cursor!
  node: ParagraphNewsletter!
}

"""A paginated set of results for ParagraphQuote."""
type ParagraphQuoteConnection implements Connection {
  edges: [ParagraphQuoteEdge!]!
  nodes: [ParagraphQuote!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphQuote."""
type ParagraphQuoteEdge implements Edge {
  cursor: Cursor!
  node: ParagraphQuote!
}

"""A paginated set of results for ParagraphSidebyside."""
type ParagraphSidebysideConnection implements Connection {
  edges: [ParagraphSidebysideEdge!]!
  nodes: [ParagraphSidebyside!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphSidebyside."""
type ParagraphSidebysideEdge implements Edge {
  cursor: Cursor!
  node: ParagraphSidebyside!
}

"""A paginated set of results for ParagraphStatsItem."""
type ParagraphStatsItemConnection implements Connection {
  edges: [ParagraphStatsItemEdge!]!
  nodes: [ParagraphStatsItem!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphStatsItem."""
type ParagraphStatsItemEdge implements Edge {
  cursor: Cursor!
  node: ParagraphStatsItem!
}

"""A paginated set of results for ParagraphText."""
type ParagraphTextConnection implements Connection {
  edges: [ParagraphTextEdge!]!
  nodes: [ParagraphText!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphText."""
type ParagraphTextEdge implements Edge {
  cursor: Cursor!
  node: ParagraphText!
}

"""A paginated set of results for ParagraphView."""
type ParagraphViewConnection implements Connection {
  edges: [ParagraphViewEdge!]!
  nodes: [ParagraphView!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for ParagraphView."""
type ParagraphViewEdge implements Edge {
  cursor: Cursor!
  node: ParagraphView!
}

"""A paginated set of results for User."""
type UserConnection implements Connection {
  edges: [UserEdge!]!
  nodes: [User!]!
  pageInfo: ConnectionPageInfo!
}

"""Edge for User."""
type UserEdge implements Edge {
  cursor: Cursor!
  node: User!
}

"""The schema's entry-point for mutations."""
type Mutation {
  """Placeholder for mutation extension."""
  _: Boolean!
}

"""The schema's entry-point for subscriptions."""
type Subscription {
  """Placeholder for subscription extension."""
  _: Boolean!
}

"""A Date range has a start and an end."""
type DateRange {
  """The start of the date range."""
  start: DateTime

  """The end of the date range."""
  end: DateTime
}

"""A file object to represent an managed file."""
type File {
  """The name of the file."""
  name: String

  """The URL of the file."""
  url: String!

  """The size of the file in bytes."""
  size: Int!

  """The mime type of the file."""
  mime: String

  """The description of the file."""
  description: String
}

"""Entity type image_style."""
type ImageStyle implements ImageStyleInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!
  name: String!
}

"""Entity type image_style."""
interface ImageStyleInterface {
  """The Universally Unique IDentifier (UUID)."""
  id: ID!
  name: String!
}

"""Entity type image_style."""
union ImageStyleUnion = ImageStyle

"""Entity type menu."""
union MenuUnion = Menu

"""A field whose value conforms to the standard E.164"""
scalar PhoneNumber

"""
Unsupported entity or field type in the schema.
This entity may not have been enabled in the schema yet and is being referenced via entity reference.
"""
type UnsupportedType {
  """Unsupported type, always TRUE."""
  unsupported: Boolean
}

"""Untyped structured data. Eg JSON, configuration, settings, attributes."""
scalar UntypedStructuredData

"""Entity type user."""
union UserUnion = User

"""An exposed filter option for the view."""
type ViewFilter {
  """The filter identifier."""
  id: ID!

  """The filter plugin type."""
  plugin: String!

  """The filter field type."""
  type: String!

  """The filter element label."""
  label: String

  """The filter element description."""
  description: String

  """Whether the filter is required."""
  required: Boolean!

  """Whether the filter allows multiple values."""
  multiple: Boolean!

  """The value for the filter. Could be an array for multiple values."""
  value: UntypedStructuredData

  """The filter element options if any are defined."""
  options: UntypedStructuredData

  """The filter element attributes."""
  attributes: UntypedStructuredData!
}

"""A reference to an embedded view"""
type ViewReference {
  """The machine name of the view."""
  view: String!

  """The machine name of the display."""
  display: String!

  """The contextual filter values used."""
  contextualFilter: [String!]

  """How many results per page."""
  pageSize: Int

  """
  The name of the query used to fetch the data, if the view is a GraphQL display.
  """
  query: String
}